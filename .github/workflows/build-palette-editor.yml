name: Build Character Palette Editor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test application import
      run: |
        python -c "import palette_editor; print('Palette editor module loaded successfully')"
    
    - name: Create standalone package (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: |
        pip install pyinstaller
        pyinstaller --onefile --windowed --name CharacterPaletteEditor \
          --add-data "SaveCharacterPalette.json:." \
          palette_editor.py
    
    - name: Create standalone package (Windows)
      if: runner.os == 'Windows'
      run: |
        pip install pyinstaller
        pyinstaller --onefile --windowed --name CharacterPaletteEditor `
          --add-data "SaveCharacterPalette.json;." `
          palette_editor.py
    
    - name: Upload artifacts (Ubuntu)
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v3
      with:
        name: CharacterPaletteEditor-Linux-Python${{ matrix.python-version }}
        path: dist/*
    
    - name: Upload artifacts (Windows)
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: CharacterPaletteEditor-Windows-Python${{ matrix.python-version }}
        path: dist/*
    
    - name: Upload artifacts (macOS)
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v3
      with:
        name: CharacterPaletteEditor-macOS-Python${{ matrix.python-version }}
        path: dist/*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Display structure of downloaded files
      run: ls -R artifacts
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: artifacts/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
